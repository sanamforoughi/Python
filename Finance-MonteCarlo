import pandas_datareader as web
import pandas as pd
import datetime as dt
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style

#http://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/
#https://www.rapidtables.com/math/symbols/Statistical_Symbols.html
#list of distributions..: normal, lognormal(longtailish), uniform, triangular, PERT(weight average), Discrete (yay there's 22 subtypes)



"""The monte carlo theory of a brownian-walk output: it accounts for risk, it shows the extreme possibilities using a probability distribution
    This is the equation: dS/S = exp(μX (dT) + std€X(dT)^1/2))
    dS= change in time from one step to the next
    S=previous value
    dT= change in time from one step to the next (purchased date)
    std= annualised volatility or the standard deviation
    €= value from a probability distribution (Monte Carlo..)

    The simulation provides a number of advantages over deterministic or single point estimates 
    Probabilitic results, graphical results, sensitivity analysis, scenario analysis, correlation of inputs
    """

style.use('ggplot')

start = dt.datetime(2012, 01, 03)
end = dt.datetime(2018, 01, 17) # you can change this to prove that it works by testing it with last week's price 

prices = web.DataReader('AMZN', 'yahoo', start, end)['Close']
returns = prices.pct_change()

last_price = prices[-1]

#Number of Simulations
num_simulations = 1000
num_days = 800 # !!!!!!!!!!! number of days your projection is for

simulation_df = pd.DataFrame()

for x in range(num_simulations):
    count = 0
    daily_vol = returns.std()
    
    price_series = []
    
    price = last_price * (1 + np.random.normal(0, daily_vol))
    price_series.append(price)
    
    for y in range(num_days):
        if count == 251:
            break
        price = price_series[count] * (1 + np.random.normal(0, daily_vol))
        price_series.append(price)
        count += 1
    
    simulation_df[x] = price_series

     # print np.mean(simulation_df[x])

   
    print(simulation_df[x])
    print(price_series)#this hurts a little
    print("this is the mean")
    print np.average(price_series)
    
fig = plt.figure()
fig.suptitle('Monte Carlo Simulation: AMZN')
plt.plot(simulation_df)
plt.axhline(y = last_price, color = 'r', linestyle = '-')
plt.xlabel('Day')
plt.ylabel('Price')
plt.show()

# bought at 1312.24
